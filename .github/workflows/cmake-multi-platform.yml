name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        build_type: [Release]
        c_compiler: [gcc, clang]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++

    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies on Ubuntu
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get update && sudo apt-get install -y libxslt1-dev

    - name: Install dependencies on macOS
      if: matrix.os == 'macos-latest'
      run: brew install libxslt

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Zip the build
      run: |
        cd ${{ steps.strings.outputs.build-output-dir }}
        zip -r compiled-binaries.zip .

    - name: Upload to GitHub Packages
      uses: actions/upload-artifact@v3
      with:
        name: compiled-binaries
        path: ${{ steps.strings.outputs.build-output-dir }}/compiled-binaries.zip

    - name: Publish to GitHub Packages
      run: |
        echo "repository=${{ github.repository }}" >> $GITHUB_ENV
        echo "actor=${{ github.actor }}" >> $GITHUB_ENV
        echo "token=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
        echo "package_version=1.0.0" >> $GITHUB_ENV # Update or parameterize as needed
        curl -X PUT \
             -H "Accept: application/vnd.github.v3+json" \
             -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
             -H "Content-Type: application/zip" \
             --data-binary @${{ steps.strings.outputs.build-output-dir }}/compiled-binaries.zip \
             "https://uploads.github.com/repos/$GITHUB_REPOSITORY/packages/content/zip/$PACKAGE_NAME/$PACKAGE_VERSION"
